package com.ekinoksyazilim.etkk.prototype.comm;

import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentSkipListSet;

public class EndPoint <T> {

	private ConcurrentLinkedQueue<Envelope<T>> inbox = new ConcurrentLinkedQueue<>();
	private ConcurrentLinkedQueue<Envelope<T>> outbox = new ConcurrentLinkedQueue<>();
	
	private ConcurrentSkipListSet<IEndPointListener<T>> listeners = new ConcurrentSkipListSet<>();
	
	private Socket socket;
	
	private IPackageExtractor extractor;
	
	private IParser<T> parser;
	
	public EndPoint(Socket socket, IPackageExtractor extractor, IParser<T> parser) {
		
		this.socket = socket;
		this.extractor = extractor;
		this.parser = parser;
	}
	
	public void send(T message, InetSocketAddress to) {

		outbox.add(new Envelope<T>(message, to));
	}

	public void receive(T message, InetSocketAddress from) {
		
		inbox.add(new Envelope<T>(message, from));
	}
	
	public void addListener(IEndPointListener<T> listener) {

		listeners.add(listener);
	}

	public void removeListener(IEndPointListener<T> listener) {

		listeners.remove(listener);
	}
	

	boolean read() {
		
	}
	
	boolean write() {
		
	}
}
